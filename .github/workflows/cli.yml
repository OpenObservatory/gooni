name: cli
on:
  push:
  schedule:
    - cron: "14 17 * * 3"
jobs:

  # Compile a statically linked binary for Linux
  linux:
    runs-on: "ubuntu-latest"
    container:
      image: "golang:1.14-alpine"
    steps:
      - uses: actions/checkout@v2
      - run: apk add --no-progress gcc git linux-headers musl-dev
      - run: go build -tags netgo -ldflags='-s -w -extldflags "-static"' ./cmd/ooniprobe
      - run: ./ooniprobe onboard --yes
      # Important! DO NOT run performance from CI b/c it will overload m-lab servers
      - run: ./ooniprobe run websites --config testdata/testing-config.json -v --no-collector
      - uses: actions/upload-artifact@v1
        with:
          name: ooniprobe-linux-amd64
          path: ooniprobe

  # Compile a binary for macOS
  macos:
    runs-on: "macos-latest"
    steps:
      - uses: actions/setup-go@v1
        with:
          go-version: "1.14"
      - uses: actions/checkout@v2
      # Note! the following line _assumes_ you have a working C compiler. If you
      # have Xcode command line tools installed, you are fine.
      - run: go build -ldflags='-s -w' ./cmd/ooniprobe
      - run: ./ooniprobe onboard --yes
      # Important! DO NOT run performance from CI b/c it will overload m-lab servers
      - run: ./ooniprobe run websites --config testdata/testing-config.json -v --no-collector
      - uses: actions/upload-artifact@v1
        with:
          name: ooniprobe-macos-amd64
          path: ooniprobe

  # Compile a binary for Windows
  windows:
    runs-on: "windows-latest"
    steps:
      - uses: actions/setup-go@v1
        with:
          go-version: "1.14"
      - uses: actions/checkout@v2
      # Note! the following line _assumes_ you have a working C compiler. The
      # runner used by GitHub Action uses Mingw-w64, installed by default.
      - run: go build -x -ldflags='-s -w' ./cmd/ooniprobe
      - run: ./ooniprobe.exe onboard --yes
      # Important! DO NOT run performance from CI b/c it will overload m-lab servers
      - run: ./ooniprobe.exe run websites --config testdata/testing-config.json -v --no-collector
      - uses: actions/upload-artifact@v1
        with:
          name: ooniprobe-windows-amd64
          path: ooniprobe.exe

  # Cross compile Windows binary from Ubuntu (not published). This workflow is
  # here mainly to document how to cross compile.
  cross_windows_ubuntu:
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/setup-go@v1
        with:
          go-version: "1.14"
      - uses: actions/checkout@v2
      - run: sudo apt install --yes mingw-w64
      - run: go build -tags netgo -ldflags='-s -w' ./cmd/ooniprobe
        env:
          CC: x86_64-w64-mingw32-gcc
          CGO_ENABLED: 1
          GOARCH: amd64
          GOOS: windows
